C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TFT
OBJECT MODULE PLACED IN .\tft.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\tft_touch_sd\tft\tft.C LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\hardw
                    -are\setphone;..\hardware\flash;..\hardware\huanjing;..\hardware\sendmessage;..\hardware\touch_main;..\main;..\system\bin
                    -;..\system\delay;..\system\iic;..\system\interrupt;..\system\stc;..\tft_touch_sd\font;..\tft_touch_sd\touch;..\tft_touch
                    -_sd\tft;..\tft_touch_sd\txt;..\hardware\chuankou;..\hardware\zhuce;..\hardware\init) DEBUG OBJECTEXTEND PRINT(.\tft.lst)
                    - TABS(2) OBJECT(.\tft.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include "string.h"
   3          #include "font.h"
   4          #include "delay.h"
   5          #include "tft.h"
   6          #include "image.h"
   7          /*51单片机TFT程序*
   8           ********************************** ********************
   9           *51芯片为 STC12 48脚    
  10           *TFT驱动IC为SSD1289
  11           ******************************************************
  12           *TFT接口
  13            *数据线（输出）： DB0-DB7(低8位),依次连接P2^0-P2^7;
  14                         DB8-DB15(高8位),依次连接P0^0-P0^7;
  15            *控制线（输出）：
  16            P5.2-----------RS
  17            P5.3-----------WR
  18            P6.0-----------RD
  19            P6.4-----------CS
  20            P6.5-----------REST 
  21          
  22           ******************************************************
  23           *#define HVSCREEN  定义该变量表示是竖屏显示，否则是横屏显示
  24           */
  25          
  26          #define TFT_DataPortH P0 //高8位数据口,8位模式下只使用高8位
  27          #define TFT_DataPortL P2 //低8位数据口  ,8位模式下低8位可以不接线,请确认P0口已经上拉10K电阻,不宜太小，最小4
             -.7K,推荐10K.
  28          
  29          sbit TFT_RS = P5 ^ 2; //数据1/命令0
  30          sbit TFT_WR = P5 ^ 3; //写控制
  31          
  32          sbit TFT_RD = P6 ^ 0; //读控制Not used and should be connected to VDDIO or Vss
  33          sbit TFT_CS = P6 ^ 4; //片选，低电平有效
  34          sbit TFT_REST = P6 ^ 5; //低电平复位
  35          
  36          unsigned char Y_LEN = 0; //全局变量用于消息一直往下打印
  37          /***********总线定义*************/
  38          void TFT_Writ_Bus(unsigned char VH, unsigned char VL) //并行数据写入函数
  39          {
  40   1        TFT_DataPortH = VH;
  41   1        TFT_DataPortL = VL;
  42   1        TFT_WR = 0;
  43   1        TFT_WR = 1;
  44   1      }
  45          void TFT_WR_DATA8(unsigned char VH, unsigned char VL)
  46          {
  47   1        TFT_RS = 1;
  48   1        TFT_Writ_Bus(VH, VL);
  49   1      }
  50          void TFT_WR_DATA(unsigned int da)
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 2   

  51          {
  52   1        TFT_RS = 1;
  53   1        TFT_Writ_Bus(da >> 8, da);
  54   1      }
  55          void TFT_WR_REG(unsigned int da)
  56          {
  57   1        TFT_RS = 0;
  58   1        TFT_Writ_Bus(da >> 8, da);
  59   1      }
  60          /*
  61          void TFT_WR_REG_DATA(unsigned int reg, unsigned int da)
  62          {
  63            TFT_WR_REG(reg);
  64            TFT_WR_DATA(da);
  65          }
  66          */
  67          /* 函数说明：x1,y1为起始点的坐标；x2,y2为结束点的坐标；
  68          (0,0)x1,y1-------------x2,y1(239,0)
  69             |           |
  70             |               |
  71             |           |
  72             |           |
  73             |           |
  74             |           |
  75             |           |
  76             |           |
  77             |           |
  78             |           |
  79             |           |
  80             |           |
  81             |           |
  82             x1,y2-------------x2,y2
  83            (0,319)     (239,319)
  84            函数功能：设置显示区域 显示器竖屏
  85            R44hRAM地址：水平显示方向的起始(x1低8位)/终点(x2高8位)范围,0x00<=x1<=x2<=0xef(239) 即水平240个点
  86            R45h-R46hRAM地址：垂直显示方向的起始(y1低8位)/终点(y2低8位)范围,0x00<=y1<=y2<=0x013f(319) 即垂直320个点
  87            R4eh-R4fhRAM地址：4e为水平地址计数值<=0xef,4f为垂直地址计数值<=0x13f
  88          
  89          
  90            函数功能：设置显示区域显示器横屏(X,Y,对调) 
  91          (0,0)x1,y1-------------------------x2,y1(319,0)
  92             |                         |
  93             |                 |
  94             |                 |
  95             |                 |
  96             |                 |
  97             x1,y2---------------------------x2,y2
  98            (0,239)                     (319,239)
  99          
 100            R44hRAM地址：水平显示方向的起始(y1低8位)/终点(y2高8位)范围,0x00<=y1<=y2<=0xef(239) 即240个点
 101            R45h-R46hRAM地址：垂直显示方向的起始(x1低8位)/终点(x2低8位)范围,0x00<=x1<=x2<=0x013f(319)即320个点
 102            R4eh-R4fhRAM地址：4e为水平地址计数值<=0xef,4f为垂直地址计数值<=0x13f
 103          */
 104          void TFT_AddressSet(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
 105          {
 106   1        TFT_WR_REG(0x2A);
 107   1        TFT_WR_DATA(x1 >> 8);
 108   1        TFT_WR_DATA(x1);
 109   1        TFT_WR_DATA(x2 >> 8);
 110   1        TFT_WR_DATA(x2);
 111   1      
 112   1        TFT_WR_REG(0x2B);
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 3   

 113   1        TFT_WR_DATA(y1 >> 8);
 114   1        TFT_WR_DATA(y1);
 115   1        TFT_WR_DATA(y2 >> 8);
 116   1        TFT_WR_DATA(y2);
 117   1        TFT_WR_REG(0x2c);
 118   1      
 119   1        //    TFT_WR_REG_DATA(0x0044,(x2<<8)+x1);
 120   1        //    TFT_WR_REG_DATA(0x0045,y1);
 121   1        //    TFT_WR_REG_DATA(0x0046,y2);
 122   1        //    TFT_WR_REG_DATA(0x004e,x1);
 123   1        //    TFT_WR_REG_DATA(0x004f,y1);
 124   1      
 125   1        //      TFT_WR_REG(0x0022);  //Write Data to GRAM
 126   1      }
 127          
 128          void TFT_ClearByColor(unsigned int Color)
 129          {
 130   1        unsigned long i;
 131   1        TFT_AddressSet(0, 0, 239, 319);
 132   1        for (i = 0; i < 76800; i++)
 133   1        {
 134   2          TFT_WR_DATA(Color);
 135   2        }
 136   1      }
 137          /*  清除某个区域*/
 138          void TFT_ClearArea(unsigned int start_x, unsigned int start_y, unsigned int x_size, unsigned int y_size, u
             -nsigned int Color)
 139          {
 140   1        unsigned long i;
 141   1        TFT_AddressSet(start_x, start_y, start_x + x_size - 1, start_y + y_size - 1);
 142   1        for (i = 0; i < (unsigned long)x_size * y_size; i++)
 143   1        {
 144   2          TFT_WR_DATA(Color);
 145   2        }
 146   1      }
 147          
 148          //横屏n<240/16=15行，竖屏n<320/16=20行
 149          void TFT_ClearONELINE(unsigned int n, unsigned int Color)
 150          {
 151   1        unsigned long i;
 152   1        TFT_AddressSet(0, n * 16, 239, n * 16 + 15);
 153   1        for (i = 0; i < 16 * 240; i++)
 154   1        {
 155   2          TFT_WR_DATA(Color);
 156   2        }
 157   1      }
 158          
 159          /*
 160            函数功能：初始化TFT
 161          */
 162          void TFT_IO_INIT(void)
 163          {
 164   1        P0M0 = 0XFF;
 165   1        P0M1 = 0X00;
 166   1        P1M0 = 0XFF;
 167   1        P1M1 = 0X00;
 168   1      
 169   1        P2M0 |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 7);
 170   1        P2M1 &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 7));
 171   1      
 172   1        P3M0 |= (1 << 7);
 173   1        P3M1 &= ~(1 << 7);
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 4   

 174   1      }
 175          void TFT_Init(void)
 176          {
 177   1        TFT_IO_INIT();
 178   1        TFT_REST = 0;
 179   1        delayms(5); //低电平复位
 180   1        TFT_REST = 1;
 181   1      
 182   1        TFT_CS = 1;
 183   1        TFT_RD = 1;
 184   1        TFT_WR = 1;
 185   1        delayms(5);
 186   1        TFT_CS = 0; //打开片选使能
 187   1      
 188   1        //************* Start Initial Sequence **********//
 189   1        TFT_WR_REG(0xcf);
 190   1        TFT_WR_DATA(0x00);
 191   1        TFT_WR_DATA(0xc1);
 192   1        TFT_WR_DATA(0x30);
 193   1      
 194   1        TFT_WR_REG(0xed);
 195   1        TFT_WR_DATA(0x64);
 196   1        TFT_WR_DATA(0x03);
 197   1        TFT_WR_DATA(0x12);
 198   1        TFT_WR_DATA(0x81);
 199   1      
 200   1        TFT_WR_REG(0xcb);
 201   1        TFT_WR_DATA(0x39);
 202   1        TFT_WR_DATA(0x2c);
 203   1        TFT_WR_DATA(0x00);
 204   1        TFT_WR_DATA(0x34);
 205   1        TFT_WR_DATA(0x02);
 206   1      
 207   1        TFT_WR_REG(0xea);
 208   1        TFT_WR_DATA(0x00);
 209   1        TFT_WR_DATA(0x00);
 210   1      
 211   1        TFT_WR_REG(0xe8);
 212   1        TFT_WR_DATA(0x85);
 213   1        TFT_WR_DATA(0x10);
 214   1        TFT_WR_DATA(0x79);
 215   1      
 216   1        TFT_WR_REG(0xC0);  //Power control
 217   1        TFT_WR_DATA(0x23); //VRH[5:0]
 218   1      
 219   1        TFT_WR_REG(0xC1);  //Power control
 220   1        TFT_WR_DATA(0x11); //SAP[2:0];BT[3:0]
 221   1      
 222   1        TFT_WR_REG(0xC2);
 223   1        TFT_WR_DATA(0x11);
 224   1      
 225   1        TFT_WR_REG(0xC5); //VCM control
 226   1        TFT_WR_DATA(0x3d);
 227   1        TFT_WR_DATA(0x30);
 228   1      
 229   1        TFT_WR_REG(0xc7);
 230   1        TFT_WR_DATA(0xaa);
 231   1      
 232   1        TFT_WR_REG(0x3A);
 233   1        TFT_WR_DATA(0x55);
 234   1      
 235   1        TFT_WR_REG(0x36); // Memory Access Control
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 5   

 236   1        TFT_WR_DATA(0x08);
 237   1      
 238   1        TFT_WR_REG(0xB1); // Frame Rate Control
 239   1        TFT_WR_DATA(0x00);
 240   1        TFT_WR_DATA(0x11);
 241   1      
 242   1        TFT_WR_REG(0xB6); // Display Function Control
 243   1        TFT_WR_DATA(0x0a);
 244   1        TFT_WR_DATA(0xa2);
 245   1      
 246   1        TFT_WR_REG(0xF2); // 3Gamma Function Disable
 247   1        TFT_WR_DATA(0x00);
 248   1      
 249   1        TFT_WR_REG(0xF7);
 250   1        TFT_WR_DATA(0x20);
 251   1      
 252   1        TFT_WR_REG(0xF1);
 253   1        TFT_WR_DATA(0x01);
 254   1        TFT_WR_DATA(0x30);
 255   1      
 256   1        TFT_WR_REG(0x26); //Gamma curve selected
 257   1        TFT_WR_DATA(0x01);
 258   1      
 259   1        TFT_WR_REG(0xE0); //Set Gamma
 260   1        TFT_WR_DATA(0x0f);
 261   1        TFT_WR_DATA(0x3f);
 262   1        TFT_WR_DATA(0x2f);
 263   1        TFT_WR_DATA(0x0c);
 264   1        TFT_WR_DATA(0x10);
 265   1        TFT_WR_DATA(0x0a);
 266   1        TFT_WR_DATA(0x53);
 267   1        TFT_WR_DATA(0xd5);
 268   1        TFT_WR_DATA(0x40);
 269   1        TFT_WR_DATA(0x0a);
 270   1        TFT_WR_DATA(0x13);
 271   1        TFT_WR_DATA(0x03);
 272   1        TFT_WR_DATA(0x08);
 273   1        TFT_WR_DATA(0x03);
 274   1        TFT_WR_DATA(0x00);
 275   1      
 276   1        TFT_WR_REG(0xE1); //Set Gamma
 277   1        TFT_WR_DATA(0x00);
 278   1        TFT_WR_DATA(0x00);
 279   1        TFT_WR_DATA(0x10);
 280   1        TFT_WR_DATA(0x03);
 281   1        TFT_WR_DATA(0x0f);
 282   1        TFT_WR_DATA(0x05);
 283   1        TFT_WR_DATA(0x2c);
 284   1        TFT_WR_DATA(0xa2);
 285   1        TFT_WR_DATA(0x3f);
 286   1        TFT_WR_DATA(0x05);
 287   1        TFT_WR_DATA(0x0e);
 288   1        TFT_WR_DATA(0x0c);
 289   1        TFT_WR_DATA(0x37);
 290   1        TFT_WR_DATA(0x3c);
 291   1        TFT_WR_DATA(0x0F);
 292   1        TFT_WR_REG(0x11); //Exit Sleep
 293   1        delayms(80);    //此处必须要延时80ms或者更多
 294   1        TFT_WR_REG(0x29); //display on
 295   1      
 296   1        //  TFT_WR_REG_DATA(0x0000,0x0001);      //打开晶振
 297   1        //    TFT_WR_REG_DATA(0x0003,0xA8A4);      //0xA8A4
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 6   

 298   1        //    TFT_WR_REG_DATA(0x000C,0x0000);
 299   1        //    TFT_WR_REG_DATA(0x000D,0x080C);
 300   1        //    TFT_WR_REG_DATA(0x000E,0x2B00);
 301   1        //    TFT_WR_REG_DATA(0x001E,0x00B7);
 302   1        //    TFT_WR_REG_DATA(0x0001,0x2B3F);      //驱动输出控制320*240  0x6B3F
 303   1      
 304   1        //    TFT_WR_REG_DATA(0x0002,0x0600);
 305   1        //    TFT_WR_REG_DATA(0x0010,0x0000);
 306   1      
 307   1        //#ifdef HVSCREEN       //竖屏  16位色
 308   1        ////   TFT_WR_REG_DATA(0x0011,0x6838);  //全屏显示320*240视频时配置（此时汉字不能显示）,自上而下,从左到右
 309   1        //    TFT_WR_REG_DATA(0x0011,0x6830);    //显示字符、汉字、视频（宽度小于240）时配置,从左到右 ,自上而下
 310   1        //#else           //宽屏  16位色
 311   1        //   TFT_WR_REG_DATA(0x0011,0x6818);  //目前显示字符、汉字、视频都可以,自下而上,从左到右
 312   1        //#endif
 313   1        //
 314   1        //    TFT_WR_REG_DATA(0x0005,0x0000);
 315   1        //    TFT_WR_REG_DATA(0x0006,0x0000);
 316   1        //    TFT_WR_REG_DATA(0x0016,0xEF1C);
 317   1        //    TFT_WR_REG_DATA(0x0017,0x0003);
 318   1        //    TFT_WR_REG_DATA(0x0007,0x0233);            //0x0233
 319   1        //    TFT_WR_REG_DATA(0x000B,0x0000);
 320   1        //    TFT_WR_REG_DATA(0x000F,0x0000);            //扫描开始地址
 321   1        //    TFT_WR_REG_DATA(0x0041,0x0000);
 322   1        //    TFT_WR_REG_DATA(0x0042,0x0000);
 323   1        //    TFT_WR_REG_DATA(0x0048,0x0000);
 324   1        //    TFT_WR_REG_DATA(0x0049,0x013F);
 325   1        //    TFT_WR_REG_DATA(0x004A,0x0000);
 326   1        //    TFT_WR_REG_DATA(0x004B,0x0000);
 327   1        //    TFT_WR_REG_DATA(0x0044,0xEF00);
 328   1        //    TFT_WR_REG_DATA(0x0045,0x0000);
 329   1        //    TFT_WR_REG_DATA(0x0046,0x013F);
 330   1        //    TFT_WR_REG_DATA(0x0030,0x0707);
 331   1        //    TFT_WR_REG_DATA(0x0031,0x0204);
 332   1        //    TFT_WR_REG_DATA(0x0032,0x0204);
 333   1        //    TFT_WR_REG_DATA(0x0033,0x0502);
 334   1        //    TFT_WR_REG_DATA(0x0034,0x0507);
 335   1        //    TFT_WR_REG_DATA(0x0035,0x0204);
 336   1        //    TFT_WR_REG_DATA(0x0036,0x0204);
 337   1        //    TFT_WR_REG_DATA(0x0037,0x0502);
 338   1        //    TFT_WR_REG_DATA(0x003A,0x0302);
 339   1        //    TFT_WR_REG_DATA(0x003B,0x0302);
 340   1        //    TFT_WR_REG_DATA(0x0023,0x0000);
 341   1        //    TFT_WR_REG_DATA(0x0024,0x0000);
 342   1        //    TFT_WR_REG_DATA(0x0025,0x8000);
 343   1        TFT_ClearByColor(WHITE);
 344   1      }
 345          /*******************************************显示字符功能函数区********************************************
             -*************************/
 346          /*
 347            函数功能：指定位置显示任意大小的字符(可以是汉字) 默认字符为8*16，汉字为16*16
 348            x,y:起始字符的行列，x<30列宽为8的字符,y<20行高为16的字符
 349            size_x,size_y:字体的大小
 350            PColor为内容颜色，BColor为背静颜色
 351          */
 352          void TFT_ShowWord(unsigned int x, unsigned int y, unsigned int size_x, unsigned int size_y, unsigned char 
             -*temp, unsigned int PColor, unsigned int BColor)
 353          {
 354   1        unsigned char i, j;
 355   1        TFT_AddressSet(x, y, x + size_x - 1, y + size_y - 1); //设置区域
 356   1      
 357   1        for (j = 0; j < size_x * size_y / 8; j++) //如果字符为16个数组，如果为汉字为32个数组
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 7   

 358   1        {
 359   2          for (i = 8; i > 0; i--) //高位在前，低位在后，取字模时匹配就OK
 360   2          {
 361   3            if ((*temp & (1 << (i - 1))) > 0) //最高位为左移7位
 362   3            {
 363   4              TFT_WR_DATA(PColor); //对应于取字模时的阴码
 364   4            }
 365   3            else
 366   3            {
 367   4              TFT_WR_DATA(BColor);
 368   4            }
 369   3          }
 370   2          temp++;
 371   2        }
 372   1      }
 373          /*
 374            函数功能：指定位置显示显示字符串  默认字符为8*16，汉字为16*16
 375            x,y:起始字符的行列:竖屏x<30列(240/8) y<20行(320/16);宽屏x<30列(320/8=40) y<15行(240/16)
 376            *ptr:显示内容
 377            PenColor为内容颜色，BackColor为背静颜色
 378          */
 379          void TFT_ShowString(unsigned int x, unsigned int y, unsigned char *ptr, unsigned int PenColor, unsigned in
             -t BackColor)
 380          {
 381   1        unsigned char i, j, val = 0; //一定要初始化，不然xlen在第二次调用时会有问题
 382   1      
 383   1        unsigned char temp[2];
 384   1        unsigned char xlen;
 385   1        unsigned char ylen;
 386   1        unsigned char max_ylen;
 387   1        unsigned char max_xlen;
 388   1      #ifdef HVSCREEN //竖屏
 389   1        max_xlen = 30;
 390   1        max_ylen = 20; //最多显示240/8=30列 320/16=20行
 391   1      #else        //宽屏
                max_xlen = 40;
                max_ylen = 15; //最多显示320/8=40列 240/16=15行
              #endif
 395   1        for (i = 0; i < strlen(ptr); i++)
 396   1        {
 397   2          temp[0] = ptr[i];
 398   2          temp[1] = ptr[i + 1];
 399   2      
 400   2          xlen = (x + i + val) % max_xlen;
 401   2          ylen = ((x + i + val) / max_xlen + y) % max_ylen;
 402   2          //    if(xlen==0 && ylen ==0)
 403   2          //      TFT_ClearByColor(BACK_COLOR);
 404   2      
 405   2          if (temp[0] < 128)                                        //为ASCII码
 406   2            TFT_ShowWord(xlen * 8, ylen * 16, 8, 16, ASCII_816[temp[0] - 0x20], PenColor, BackColor); //ASCII码前32
             -个字库未录入temp[0]-0x20)，每个字符16个
 407   2          else                                              //为汉字
 408   2          {
 409   3            if (xlen == max_xlen - 1) //最后一列不能放下一个汉字
 410   3            {
 411   4              TFT_ShowWord(xlen * 8, ylen * 16, 8, 16, ASCII_816[0], PenColor, BackColor); //显示“ ”空白填补
 412   4              val++;
 413   4              i--; //指针还是指向原汉字,所以要减一
 414   4            }
 415   3            else
 416   3            {
 417   4              for (j = 0; j < sizeof(GB16) / 35; j++) //查找汉字库，34字节一个字符
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 8   

 418   4              {
 419   5                if ((temp[0] == GB16[j].Index[0]) && (temp[1] == GB16[j].Index[1])) //找到需要的汉字字节
 420   5                {
 421   6                  break;
 422   6                }
 423   5              }
 424   4              if (j < sizeof(GB16) / 35)
 425   4                TFT_ShowWord(xlen * 8, ylen * 16, 16, 16, &GB16[j].MSK, PenColor, BackColor);
 426   4              i++;
 427   4            }
 428   3          }
 429   2        }
 430   1        Y_LEN = ylen + 1; //记录下用到的行数+下一行
 431   1        Y_LEN %= max_ylen;
 432   1      }
 433          
 434          /*******************************************显示图片功能函数区********************************************
             -*************************/
 435          
 436          //n为像素大小>0
 437          //POINT_COLOR:此点的颜色
 438          void LCD_DrawPoint_big(unsigned int x, unsigned int y, unsigned char n, unsigned int Pen_Color)
 439          {
 440   1        unsigned char i;
 441   1        if (n > 0)
 442   1        {
 443   2          TFT_AddressSet(x, y, x + n - 1, y + n - 1); //设置光标位置
 444   2          for (i = 0; i < n * n; i++)
 445   2            TFT_WR_DATA(Pen_Color);
 446   2        }
 447   1      }
 448          //画线
 449          //x1,y1:起点坐标
 450          //x2,y2:终点坐标
 451          void LCD_DrawLine(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int Pen_Col
             -or)
 452          {
 453   1        unsigned int t;
 454   1        int xerr = 0, yerr = 0, dx, dy, distance;
 455   1        int incx, incy, uRow, uCol;
 456   1      
 457   1        dx = x2 - x1; //计算坐标增量
 458   1        dy = y2 - y1;
 459   1      
 460   1        uRow = x1;
 461   1        uCol = y1;
 462   1      
 463   1        if (dx > 0)
 464   1          incx = 1; //设置单步方向
 465   1        else if (dy == 0)
 466   1          incx = 0; //垂直线
 467   1        else
 468   1        {
 469   2          incx = -1;
 470   2          dx = -dx;
 471   2        }
 472   1      
 473   1        if (dy > 0)
 474   1          incy = 1;
 475   1        else if (dy == 0)
 476   1          incy = 0; //水平线
 477   1        else
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 9   

 478   1        {
 479   2          incy = -1;
 480   2          dy = -dy;
 481   2        }
 482   1      
 483   1        if (dx > dy)
 484   1          distance = dx; //选取基本增量坐标轴
 485   1        else
 486   1          distance = dy;
 487   1      
 488   1        for (t = 0; t <= distance; t++) //画线输出
 489   1        {
 490   2          LCD_DrawPoint_big(uRow, uCol, 1, Pen_Color); //画点
 491   2          xerr += dx;
 492   2          yerr += dy;
 493   2          if (xerr >= distance)
 494   2          {
 495   3            xerr -= distance;
 496   3            uRow += incx;
 497   3          }
 498   2          if (yerr >= distance)
 499   2          {
 500   3            yerr -= distance;
 501   3            uCol += incy;
 502   3          }
 503   2        }
 504   1      }
 505          
 506          //画矩形
 507          void LCD_DrawRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int Pe
             -n_Color)
 508          {
 509   1        LCD_DrawLine(x1, y1, x2, y1, Pen_Color); //上横
 510   1        LCD_DrawLine(x1, y1, x1, y2, Pen_Color); //左竖
 511   1        LCD_DrawLine(x1, y2, x2, y2, Pen_Color); //下横
 512   1        LCD_DrawLine(x2, y1, x2, y2, Pen_Color); //右竖
 513   1      }
 514          /*********************************************
 515          画实心矩形
 516          入口参数： (x1,y1)左上角顶点坐标, (x2,y2)右下角顶点坐标, Pen_Color颜色
 517          出口参数: 无
 518          说明：在指定位置上画出实心矩形。
 519          **********************************************/
 520          void LCD_DrawBox(unsigned int x, unsigned int y, unsigned int size_x, unsigned int size_y, unsigned int Pe
             -n_Color)
 521          {
 522   1        unsigned int i;
 523   1        TFT_AddressSet(x, y, x + size_x - 1, y + size_y - 1); //设置光标位置
 524   1        for (i = 0; i < size_x * size_y; i++)
 525   1          TFT_WR_DATA(Pen_Color);
 526   1      }
 527          //在指定位置画一个指定大小的圆
 528          //(x,y):中心点
 529          //r    :半径
 530          /*
 531          void Draw_Circle(unsigned int x0, unsigned int y0, unsigned int r, unsigned int Pen_Color)
 532          {
 533            int a, b;
 534            int di;
 535            a = 0;
 536            b = r;
 537            di = 3 - (r << 1); //判断下个点位置的标志
C51 COMPILER V9.01   TFT                                                                   06/19/2020 12:28:55 PAGE 10  

 538            while (a <= b)
 539            {
 540              LCD_DrawPoint_big(x0 - b, y0 - a, 1, Pen_Color); //3
 541              LCD_DrawPoint_big(x0 + b, y0 - a, 1, Pen_Color); //0
 542              LCD_DrawPoint_big(x0 - a, y0 + b, 1, Pen_Color); //1
 543              LCD_DrawPoint_big(x0 - b, y0 - a, 1, Pen_Color); //7
 544              LCD_DrawPoint_big(x0 - a, y0 - b, 1, Pen_Color); //2
 545              LCD_DrawPoint_big(x0 + b, y0 + a, 1, Pen_Color); //4
 546              LCD_DrawPoint_big(x0 + a, y0 - b, 1, Pen_Color); //5
 547              LCD_DrawPoint_big(x0 + a, y0 + b, 1, Pen_Color); //6
 548              LCD_DrawPoint_big(x0 - b, y0 + a, 1, Pen_Color);
 549              a++;
 550              //使用Bresenham算法画圆
 551              if (di < 0)
 552                di += 4 * a + 6;
 553              else
 554              {
 555                di += 10 + 4 * (a - b);
 556                b--;
 557              }
 558              LCD_DrawPoint_big(x0 + a, y0 + b, 1, Pen_Color);
 559            }
 560          }
 561          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2961    ----
   CONSTANT SIZE    =   3200    ----
   XDATA SIZE       =      1     129
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
