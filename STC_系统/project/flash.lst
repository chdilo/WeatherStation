C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN .\flash.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\hardware\flash\flash.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\hardw
                    -are\setphone;..\hardware\flash;..\hardware\huanjing;..\hardware\sendmessage;..\hardware\touch_main;..\main;..\system\bin
                    -;..\system\delay;..\system\iic;..\system\interrupt;..\system\stc;..\tft_touch_sd\font;..\tft_touch_sd\touch;..\tft_touch
                    -_sd\tft;..\tft_touch_sd\txt;..\hardware\chuankou;..\hardware\zhuce;..\hardware\init) DEBUG OBJECTEXTEND PRINT(.\flash.ls
                    -t) TABS(2) OBJECT(.\flash.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include <intrins.h>
   3          #include  "delay.h"         //延时函数
   4          #include  "tft.h"
   5          #include  "flash.h"
   6          #include  "stdio.h"
   7          #include  "setphone.h"
   8          /**单片机作为主机，W25Q64作为从机**/
   9          sbit W25_CS = P5^0;
  10          sbit NR_MOSI = P1^3;
  11          sbit NR_MISO = P1^4;
  12          sbit NR_SCK = P1^5;
  13          
  14          sbit SD_CS   = P1^2;
  15          
  16          unsigned int DEVICE_ID = 0xEF17;  //W25Q64的制造商标志
  17          bit f_spistatus = 0;
  18          
  19          
  20          
  21          
  22          /************************************************
  23          SPI中断服务程序
  24          //***********************************************/
  25          //void spi_isr() interrupt 9
  26          //{
  27          //  SPSTAT = SPIF|WCOL;  //清除SPI状态位
  28          //  f_spistatus = FALSE;
  29          //}
  30          
  31          /****************************************
  32          SPI初始化    初始化时未使能SPI
  33          *****************************************/
  34          void InitSpi(void)
  35          {
  36   1          P1M1 |=(1<<4);
  37   1        P1M0 &=~(1<<4);
  38   1      
  39   1        P1M1 &=~(1<<3)|(1<<5);
  40   1        P1M0 |=(1<<3)|(1<<5);
  41   1      
  42   1        P5M1 &=~(1<<0);
  43   1        P5M0 |=(1<<0);
  44   1      
  45   1        ACC = P_SW1;         //切换到第一组spi
  46   1        ACC &= ~(SPI_S0|SPI_S1);   //SPI_S0=0;SPI_S1=0
  47   1        P_SW1 |= ACC;        //(P1.2/SS,P1.3/MOSI,P1.4/MISO,P1.5/SCLK)
  48   1      
  49   1        SPSTAT = SPIF|WCOL;          //清除SPI状态
  50   1        W25_CS = 1;
  51   1        SPDAT = 0;    //清空SPI寄存器
C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 2   

  52   1        SPCTL = SPEN|SSIG|MSTR|SPDL;      //设置SPI为主模式,
  53   1                        //注意：时钟选为CPU_CLK/16,选择CPU_CLK/4传输出错，建议时钟频率一般不要超过3MHz
  54   1      
  55   1      //  IE2|=ESPI;
  56   1      //  EA =1;
  57   1      }
  58          // 功能：读取W25Q16芯片的状态。
  59          // 返回值：状态寄存器数据字节
  60          // 注：W25X16内部状态寄存器第0位=0表示空闲，0位=1表示忙。
  61          unsigned char W25Q16_ReadStatus()
  62          {
  63   1          unsigned char status=0;
  64   1          W25_CS=0;
  65   1          SpiSendData(W25X_CMD_ReadStatusReg1);   // 0x05读取状态的命令字
  66   1          status=SpiSendData(0xff);        // 读取状态字节
  67   1          W25_CS=1;                         // 关闭片选
  68   1          return status;
  69   1      } 
  70          /**********************************************************************
  71          函数名称：ReadDeviceID
  72          函数功能：读取Device ID
  73          入口参数：无
  74          出口参数：
  75                      DeviceID-------->设备ID
  76          ***********************************************************************/
  77          /*
  78          unsigned int ReadDeviceID(void)
  79          {
  80              unsigned int DeviceID=0;
  81              while(W25Q16_ReadStatus()&0x01);    //判断是否忙
  82              W25_CS = 0;
  83          //  f_spistatus=1;
  84              SpiSendData(0x90);
  85              
  86              SpiSendData(0x00);
  87              SpiSendData(0x00);
  88              SpiSendData(0x00);
  89            
  90              DeviceID = (SpiSendData(0xff) << 8);
  91              DeviceID |= SpiSendData(0xff);
  92              W25_CS = 1;
  93              return DeviceID;
  94          }
  95          */
  96          /***********************************************************************
  97          函数名称：SpiSendData
  98          函数功能：SPI发送数据
  99          入口参数：
 100                    tData----------------->待发送数据
 101          出口参数：无
 102          ************************************************************************/
 103          
 104          unsigned char SpiSendData(unsigned char tData)
 105          {  
 106   1          SPDAT = tData;      //发送缓冲区为空时发送数据  
 107   1          while(!(SPSTAT & 0x80));//等待发送完毕
 108   1        SPSTAT = SPIF|WCOL;//设置状态寄存器初值
 109   1        return SPDAT;
 110   1      }
 111          
 112          /*
 113          void Spi_Flash_init(void)
C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 3   

 114          {
 115          //  DEVICE_ID = ReadDeviceID();//读取Flash ID
 116            Flash_ChipErase();//Flash 擦除
 117          }
 118          */
 119          
 120          /**********************************************************************
 121          函数名称：Flash_32K_Erase
 122          函数功能：32K 区域擦除
 123          入口参数：
 124          出口参数：
 125          ***********************************************************************/
 126          /*
 127          void Flash_64K_Erase(unsigned long EraseAddr)
 128          {
 129          
 130          //  EraseAddr*=W25Q64_BLOCK_SIZE;
 131            SpiWriteEn();
 132            
 133            W25_CS = 0;
 134            
 135            SpiSendData(0xd8);  //64K区域擦除
 136            SpiSendData((EraseAddr & 0xFF0000) >> 16);
 137            SpiSendData((EraseAddr & 0xFF00) >> 8);
 138            SpiSendData(EraseAddr & 0xFF);
 139            W25_CS = 1;
 140            SPI_FLASH_WaitForWriteEnd();
 141          }  
 142          */
 143          /**********************************************************************
 144          函数名称：Flash_4K_Erase
 145          函数功能：4K 区域擦除  扇区擦除
 146          入口参数：
 147          出口参数：
 148          ***********************************************************************/
 149          /*
 150          void Flash_4K_Erase(unsigned long EraseAddr)
 151          {
 152          
 153          //    EraseAddr*=W25Q64_SECTOR_SIZE;
 154              SpiWriteEn();
 155              
 156              W25_CS = 0;
 157              
 158              SpiSendData(0x20);  //4K区域擦除
 159              SpiSendData((EraseAddr & 0xFF0000) >> 16);
 160              SpiSendData((EraseAddr & 0xFF00) >> 8);
 161              SpiSendData(EraseAddr & 0xFF);
 162              W25_CS = 1;
 163            SPI_FLASH_WaitForWriteEnd();
 164          }
 165          */
 166          
 167          /*********************************************************************
 168          函数名称：Flash_ChipErase
 169          函数功能：整片擦除                            
 170          *********************************************************************/                      
 171          /*
 172          void Flash_ChipErase(void)
 173          {
 174            SpiWriteEn(); //写使能
 175            W25_CS = 0;
C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 4   

 176          //  f_spistatus=2;
 177            SpiSendData(W25X_CMD_ChipErase);   //发送整片擦除指令
 178            W25_CS = 1;
 179            SPI_FLASH_WaitForWriteEnd();
 180          }
 181          */
 182          /***********************************************************************
 183          函数功能：SPI延时
 184          ***********************************************************************/
 185          /*
 186          void SpiDelay(void)
 187          {
 188              _nop_();
 189            _nop_();
 190            _nop_();
 191            _nop_();
 192            _nop_();
 193          }
 194          */
 195          /***********************************************************************
 196          函数名称：SpiWriteEn
 197          函数功能：SPI写使能
 198          入口参数：无
 199          出口参数：无
 200          ************************************************************************/
 201          /*
 202          void SpiWriteEn(void)
 203          {
 204              W25_CS = 0;
 205          //  SpiDelay();
 206          //  f_spistatus=3;
 207              SpiSendData(W25X_CMD_WriteEnable);   //发送写使能指令
 208              W25_CS = 1;
 209          }   
 210          */
 211          /**************************************************************************
 212          函数名称：SPI_FLASH_WaitForWriteEnd
 213          函数功能：读Flash芯片状态寄存器的值并且循环读取标志位直到写周期结束
 214          入口参数：无
 215          出口参数：无
 216           *************************************************************************/
 217          /*
 218          void SPI_FLASH_WaitForWriteEnd(void)
 219          {
 220            unsigned char FLASH_Status = 0;
 221            W25_CS = 0;
 222          
 223            // 发送读状态寄存器命令，发送完之后，状态寄存器的值会被传送到STM8 
 224          //  f_spistatus=4;
 225            SpiSendData(W25X_CMD_ReadStatusReg1); //读取Flash 状态寄存器1
 226          
 227            // 循环查询标志位 等待写周期结束 
 228            do
 229            {
 230              //0x00是一个无意义的指令 发这条指令是为了生成FLASH芯片需要的时钟
 231              //并且将FLASH的状态寄存器的值读回单片机   ********并不是很懂
 232            FLASH_Status =  SpiSendData(0x00);
 233            }
 234            while ((FLASH_Status & 0x01) == 0x01);//若没有写完则一直等待，保持CS=0
 235          
 236            W25_CS = 1;
 237          }
C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 5   

 238          */
 239          ///************************************************************************
 240          //函数名称：Spi_PageWrite
 241          //函数功能：Flash  页写
 242          //入口参数：
 243          //    tBuf---------->待发数据指针
 244          //    tWriteAddr---->发送至Flash的地址    
 245          //    tNum---------->发送数据个数         
 246          //*************************************************************************/
 247          //unsigned int tgmwrit=0;
 248          //unsigned int twrite1,twrite2;
 249          //void Spi_PageWrite(unsigned char* tBuf,unsigned long tWriteAddr,unsigned int tNum)
 250          //{
 251          //  while(W25Q16_ReadStatus()&0x01);    //判断是否忙
 252          //  SpiWriteEn();
 253          //  W25_CS = 0;
 254          ////  f_spistatus=6;
 255          //  SpiSendData(W25X_CMD_PageProgram);//页写指令
 256          //  SpiSendData((tWriteAddr & 0xff0000) >> 16);
 257          //  SpiSendData((tWriteAddr & 0xff00) >> 8);
 258          //  SpiSendData(tWriteAddr & 0xff);
 259          //  while(tNum--)
 260          //  {
 261          //    SpiSendData(*tBuf);
 262          //    tBuf++;
 263          //  }
 264          //  
 265          //  W25_CS = 1;
 266          //  SPI_FLASH_WaitForWriteEnd();
 267          ////  tSpiWriteAddr = tWriteAddr + tNum;//下次写地址。2013-11-06  gm
 268          //}
 269          ////无检验写SPI FLASH
 270          ////必须确保所写的地址范围内的数据全部为0XFF,否则在非0XFF处写入的数据将失败!
 271          ////具有自动换页功能
 272          ////在指定地址开始写入指定长度的数据
 273          ////pbuf:数据存储区
 274          ////WriteAddr:开始写入的地址(24bit)
 275          ////Len:要写入的字节数(最大65535)
 276          //void SPI_Flash_Write_NoCheck(unsigned char* pbuf,unsigned long WriteAddr,unsigned int Len)
 277          //{
 278          //    unsigned int PageLen;                  // 页内写入字节长度
 279          //    PageLen=256-WriteAddr%256;    // 单页剩余的字节数 （单页剩余空间）
 280          //    if(Len<=PageLen) PageLen=Len; // 不大于256 个字节
 281          //    while(1)
 282          //    {
 283          //        Spi_PageWrite(pbuf,WriteAddr,PageLen);
 284          //        if(PageLen==Len)break;   // 写入结束了
 285          //        else
 286          //        {
 287          //            pbuf+=PageLen;
 288          //            WriteAddr+=PageLen;
 289          //            Len-=PageLen;              //  减去已经写入了的字节数
 290          //            if(Len>256)PageLen=256;   // 一次可以写入256 个字节
 291          //            else PageLen=Len;          // 不够256 个字节了
 292          //        }
 293          //    }
 294          //}
 295          /************************************************************************
 296          函数名称：Spi_PageRead
 297          函数功能：Flash  页读取
 298          入口参数：
 299              tBuf---------->接收数据缓冲区指针
C51 COMPILER V9.01   FLASH                                                                 06/19/2020 12:28:51 PAGE 6   

 300              tWriteAddr---->读取的Flash地址  
 301              tNum---------->读取数据个数         
 302          *************************************************************************/
 303          unsigned int tgmread=0;
 304          unsigned int t_read,t_read1;
 305          void Spi_PageRead(unsigned char* pBuf, unsigned long tReadAddr, unsigned int tNum)
 306          {
 307   1        while(W25Q16_ReadStatus()&0x01); 
 308   1        W25_CS = 0;
 309   1      //  f_spistatus=7;
 310   1        SpiSendData(W25X_CMD_ReadData);//数据读取指令
 311   1          
 312   1        SpiSendData((tReadAddr & 0xff0000) >> 16);
 313   1        SpiSendData((tReadAddr & 0xff00) >> 8);
 314   1        SpiSendData(tReadAddr & 0xff);
 315   1        
 316   1        while (tNum--) 
 317   1        {
 318   2      
 319   2          *pBuf = SpiSendData(0xff);
 320   2          pBuf++;
 321   2      
 322   2        }
 323   1        W25_CS = 1;
 324   1      }
 325          //
 326          //void SDOpen(void)
 327          //{
 328          //  SD_CS=0;
 329          //  SPCTL &=0xbf;  //开SD ,关W25Q64
 330          //}
 331          //
 332          //void W25Open(void)
 333          //{
 334          //  SD_CS=1;
 335          //  SPCTL|=SPEN;  //关SD ,开W25Q64
 336          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    216    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
